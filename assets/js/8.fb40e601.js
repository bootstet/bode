(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{355:function(n,t,a){"use strict";a.r(t);var s=a(42),e=Object(s.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"函数式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程"}},[n._v("#")]),n._v(" 函数式编程")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("什么是函数式编程为什么要了解函数式编程")])]),n._v(" "),a("li",[a("p",[n._v("函数式编程的特性（纯函数、柯里化、函数组合等）")])]),n._v(" "),a("li",[a("p",[n._v("函数式编程的应用场景")])]),n._v(" "),a("li",[a("p",[n._v("函数式编程库 Lodash")])])]),n._v(" "),a("h4",{attrs:{id:"_1-什么是函数式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是函数式编程"}},[n._v("#")]),n._v(" 1 什么是函数式编程")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("函数式编程是编程范式之一，我们常说的编程范式还有面向过程编程，面向对象编程\n")])])]),a("ul",[a("li",[a("p",[n._v("面向对象编程的思维方法：把现实世界中的事物抽象成程序世界中的类和对象，通过封装、继承和多态来演示事物的联系")])]),n._v(" "),a("li",[a("p",[n._v("函数式编程的思维方式： 把现实世界的事物和事物之间的联系抽象到程序世界（对运算进行抽象）")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("程序的本质： 根据输入通过某种运算获得相应的输出，程序开发过程中会涉及很多有输入和输出的函数")])]),n._v(" "),a("li",[a("p",[n._v("x => f(联系、映射) => y ,y = f(x)")])]),n._v(" "),a("li",[a("p",[n._v("函数式编程中的函数指的不是程序中的函数，而是数学中的映射关系")])]),n._v(" "),a("li",[a("p",[n._v("相同的输入始终得到相同的输出")])]),n._v(" "),a("li",[a("p",[n._v("函数式编程用来描述数据（函数）之间的映射")])])])])]),n._v(" "),a("h4",{attrs:{id:"_2-函数是一等公民"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数是一等公民"}},[n._v("#")]),n._v(" 2 函数是一等公民")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("函数可以存储在变量中")])]),n._v(" "),a("li",[a("p",[n._v("函数作为参数")])]),n._v(" "),a("li",[a("p",[n._v("函数作为返回值")])])]),n._v(" "),a("p",[n._v("在javaScript中"),a("strong",[n._v("函数就是一个普通的对象")]),n._v(",我们可以把函数存储到变量/数组中，它还可以作为另一个函数的参数和返回值，甚至可以在程序运行的时候通过 new Function（'alert(1)'）来构造一个新的函数。高阶函数、柯里化的基础。")]),n._v(" "),a("h4",{attrs:{id:"高阶函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数"}},[n._v("#")]),n._v(" 高阶函数")]),n._v(" "),a("ul",[a("li",[n._v("可以把函数作为参数传递给另外一个函数，")])]),n._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[n._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 面向过程的方式")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" array "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 高阶函数")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("forEach")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("for")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 高阶函数")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// filter")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("filter")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" results "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n            results"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" results\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// let arr = [1, 3, 4, 5,6,7]")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" item "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("%")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("===")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// [4 ,6]")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("makeFn")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("let")]),n._v(" msg "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[n._v("'Hello function'")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("const")]),n._v(" fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("makeFn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[n._v("makeFn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n")])])]),a("ul",[a("li",[n._v("可以把函数作为另一个函数的返回结果")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n// once\nfunction once (fn) {\n    let done = false\n    return function () {\n        if(!done) {\n            done = true\n            return fn.apply(this, arguments)\n        }\n    }\n}\n\nlet pay = once(function (money) {\n    console.log(`支付了${money} RMB`)\n})\n\npay(5)\npay(5)\npay(5)\npay(5)\n//只执行一次\n")])])]),a("h4",{attrs:{id:"_3-高阶函是的意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-高阶函是的意义"}},[n._v("#")]),n._v(" 3 高阶函是的意义")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("抽象可以帮我屏蔽细节，只需要关注与我们的目标")])]),n._v(" "),a("li",[a("p",[n._v("高阶函数是用来抽象通用的问题")])])]),n._v(" "),a("h4",{attrs:{id:"_4-常见的高阶函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-常见的高阶函数"}},[n._v("#")]),n._v(" 4 常见的高阶函数")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("- forEach\n\n- map\n\n- filter\n\n- every\n\n- some\n\n- find/findIndex\n\n- reduce\n\n- sort\n\n-...\n")])])]),a("p",[n._v("模拟常用的高阶函数")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n// 模拟常用高阶函数： map ,every, some\n\n// map\nconst map = (array, fn) => {\n    let results = []\n    for (let value of array) {\n        results.push(fn(value))\n    }\n    return results\n}\n\nlet arr = [1,2,3,4]\narr = map(arr, v => v * v)\nconsole.log(arr) // [ 1, 4, 9, 16 ]\n\n// every\nconst every = (array, fn) => {\n    let results = true\n    for (let value of array) {\n        results = fn(value)\n        if (!results) {\n            break\n        }\n    }\n    return results\n}\n\n// 测试\nlet arr = [11, 12, 14]\nlet r = every(arr, v => v > 10)\nconsole.log(r)\n\n// some\nconst some = (array, fn) => {\n    let results = true\n    for (let value of array) {\n        results = fn(value)\n        if(results) {\n            break\n        }\n    }\n    return results\n}\n\n// 测试\nlet arr = [1, 3, 9]\nlet r = some(arr, v => v % 2 === 0)\nconsole.log(r)\n\n")])])]),a("h4",{attrs:{id:"_5闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5闭包"}},[n._v("#")]),n._v(" 5闭包")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("闭包： 函数和其周围的状态的引用捆绑在一起形成闭包。")]),n._v(" "),a("ul",[a("li",[n._v("可以在另一个作用域中调用一个函数的内部函数并访问到该函数的作用域中的成员")])])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nfunction makeFn () {\n    let msg = 'Hello function'\n    return function () {\n        console.log(msg)\n    }\n}\n\nconst fn = makeFn()\nfn()\n\n\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n// once\nfunction once (fn) {\n    let done = false\n    return function () {\n        if(!done) {\n            done = true\n            return fn.apply(this, arguments)\n        }\n    }\n}\n\nlet pay = once(function (money) {\n    console.log(`支付了${money} RMB`)\n})\n\npay(5)\npay(5)\n")])])]),a("ul",[a("li",[n._v("闭包的本质： 函数在执行的时候会放到一直执行栈上当函数执行完毕之后会从执行栈上移除，"),a("strong",[n._v("但是堆上的作用域成员因为被外部引用不能释放")]),n._v("，因此内部函数依然可以访问外部函数的成员")])]),n._v(" "),a("h4",{attrs:{id:"_6-纯函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-纯函数"}},[n._v("#")]),n._v(" 6 纯函数")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("+ **纯函数： 相同的的输入永远会得到相同的输入**,而且没有任何可观察的副作用\n\n    - 纯函数就类似数学中的函数（用来描述输入和输出之间的关系）, y = f(x)\n\n+ lodash 是一个纯函数的功能库，提供了对数组、数字、对象、字符串、函数等操作的一些方法\n\n+ 数组的slice和splice分别是纯函数和不纯的函数\n\n    - slice 返回数组中的指定部分，不会改变原数组\n\n    - splice 对数组进行操作返回改数组，会改变原数组\n\n+ 函数式编程不会保留计算中间的结果，所以变量是不可变的\n\n+ 可以把一个函数的执行结果交给另一个函数去处理    \n")])])]),a("h4",{attrs:{id:"_7-lodash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-lodash"}},[n._v("#")]),n._v(" 7 lodash")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v(" first / last / toUpp / findIndex / find / each\n")])])]),a("h4",{attrs:{id:"_8-纯函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-纯函数"}},[n._v("#")]),n._v(" 8 纯函数")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("可缓存")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("  - 因为纯函数对相同的输入始终有相同的结果，所以可以把纯函数的结果缓存起来\n")])])])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nconst _ = require('lodash')\nfunction getArea (r) {\n    return Math.PI * r * r\n}\n\nlet getArearWithMomory = memoize(getArea)\nconsole.log(getArearWithMomory(4))\n\n")])])]),a("ul",[a("li",[n._v("自己模拟一个 memoize 函数")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nfunction memoize (f) {\n    let cache = {}\n    return function () {\n        let key = JSON.stringify(arguments)\n        cache[key] = cache[key] || f.apply(f, arguments)\n        return cache[key]\n    }\n}\n\n")])])]),a("ul",[a("li",[a("p",[n._v("可测试")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("  - 纯函数让测试更方便\n")])])])]),n._v(" "),a("li",[a("p",[n._v("并行处理")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("  - 在多线程环境 下并行操作共享的内存数据很可能会出现意外轻快\n\n  - 纯函数不需要访问共享的内存数据，所以在并行环境下可以任意运行纯函数\n")])])])])]),n._v(" "),a("h4",{attrs:{id:"_9-副作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-副作用"}},[n._v("#")]),n._v(" 9 副作用")]),n._v(" "),a("ul",[a("li",[n._v("纯函数： 对于想用的输入永远会得到相同的输出，而且没有任何可观察的"),a("strong",[n._v("副作用")])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n// 不纯的\n\nlet mini = 18\n\nfunction checkage (age) {\n\n    return age >= mini\n\n}\n\n// 纯的（有硬编码，后续用柯里化解决）\n\nfunction checkAge (age) {\n\n    let mini = 18 \n\n    return age >= mini\n\n}\n\n")])])]),a("p",[n._v("副作用让一个函数变的不纯，纯函数的根据相同的输入返回相同的输出，如果函数依赖于外部的状态就无法保证输出相同，就会带来副作用")]),n._v(" "),a("p",[n._v("副作用来源：")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("+ 配置文件\n\n+ 数据库\n\n+ 用户的输入\n")])])]),a("h4",{attrs:{id:"_10-柯里化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-柯里化"}},[n._v("#")]),n._v(" 10 柯里化")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[n._v("+ 使用柯里化解决硬编码问题\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n    functionn checkAge (age) {\n\n        let min = 18\n\n    }\n\n     \n\n    // 普通纯函数\n\n    function checkAge (min, age) {\n\n        return age >= min\n\n    }\n\n    checkAge(18, 24)\n\n    checkAge(18, 20)\n\n    checkAge(20, 20)\n\n    \n\n    // 柯里化\n\n    function checkAge (min) {\n\n        return function (age) {\n\n            return age >= min\n\n        }\n\n    }\n\n    // es6 写法\n\n    let checkAge = min => (age => age >= min)\n\n    let checkAge18 = checkAge(18)\n\n    let checkAge20 = checkAge(20)\n\n\n\n    checkAge18(24)\n\n    checkAge18(20)\n\n")])])]),a("ul",[a("li",[a("p",[n._v("柯里化")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("当一个函数有多个参数的时候先传递一部分参数调用它（这部分参数以后永远不变）")])]),n._v(" "),a("li",[a("p",[n._v("然后返回一个新的函数接受剩余的参数，返回结果")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("柯里化可以让我给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数")])]),n._v(" "),a("li",[a("p",[n._v("这是一种对函数参数的'缓存'")])]),n._v(" "),a("li",[a("p",[n._v("让函数变的更灵活，让函数的粒度跟小")])]),n._v(" "),a("li",[a("p",[n._v("可以把多元函数转换为一元函数，可以组合使用函数产生强大的功能")])])])])])])]),n._v(" "),a("h4",{attrs:{id:"_11-lodash-中的柯里化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-lodash-中的柯里化"}},[n._v("#")]),n._v(" 11 lodash 中的柯里化")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nconst _ = require('lodash')\n\nconst match = _.curry(function(reg, str) {\nreturn str.match(reg)\n})\n\nconst haveSpace = match(/\\s+/g)\nconst haveNumber = match(/\\d+/g)\n\nconst filter = _.curry(function (func, array) {\n    return array.filter(func)\n})\nconst filter1 = _.curry((func, array) => array.filter(func))\nconst findSpace = filter(haveSpace)\n\nconsole.log(filter(haveSpace, ['Jogn Connor', 'Jogn_Fonne']))\nconsole.log(filter1(haveSpace, ['Jogn Connor', 'Jogn_Fonne']))\nconsole.log(findSpace(['John Connor', 'John_Donne']))\n\n")])])]),a("h4",{attrs:{id:"模拟柯里化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模拟柯里化"}},[n._v("#")]),n._v(" 模拟柯里化")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nconst getSum = (a, b, c) => a + b + c\nconst curried = curry(getSum)\n\nconsole.log(curried(1, 2, 3))\nconsole.log(curried(1)(2, 3))\nconsole.log(curried(1, 2)(3))\n\nfunction curry (func) {\n    return function curriedFn(...args) {\n    // 判断实参和形参的个数\n    if (args.length < func.length) {\n        return function () {\n            return curriedFn(...args.concat(Array.from(arguments))) // 将虚拟数组转为数组\n        }\n    }\n    return func(...args)\n    }\n}\n\n")])])]),a("h2",{attrs:{id:"函数组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数组合"}},[n._v("#")]),n._v(" 函数组合")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("flow从左到右执行")])]),n._v(" "),a("li",[a("p",[n._v("flowRight 从右到左执行")])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n // 函数组合演示\n\nfunction compose (f, g) {\n\n    return function (value) {\n\n        return f(g(value))\n\n    }\n\n}\n\nfunction reverse (array) {\n\n    return array.reverse()\n\n}\n\nfunction first (array) {\n\n    return array[0]\n\n}\n\nconst last = compost(first, reverse)\n\nconsole.log(last([1, 2, 3 4]))\n\n")])])]),a("h4",{attrs:{id:"lodash-中的组合函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lodash-中的组合函数"}},[n._v("#")]),n._v(" lodash 中的组合函数")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n // lodash 中的函数组合的方法 _.flowRight()\n\nconst _ = require('lodash')\n\n\n\nconst reverse = arr => arr.reverse()\n\nconst first = arr => arr[0]\n\nconst toUpper = s => s.toUpperCase()\n\n\n\nconst f = _.flowRight(toUpper, first, reverse)\n\nconsole.log(f(['one', 'two', 'three'])\n\n")])])]),a("h4",{attrs:{id:"模拟-ladash-中的-flowright"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模拟-ladash-中的-flowright"}},[n._v("#")]),n._v(" 模拟 ladash 中的 flowRight")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nconst reverse = arr => arr.reverse()\n\nconst first = arr => arr[0]\n\nconst toUpper = s => s.toUpperCase()\n\n\n\nconst f = _.flowRight(toUpper, first, reverse)\n\nconsole.log(f(['one', 'two', 'three'])\n\n\n\nfunction compose (...args) {\n    return function (value) {\n        return args.reverse().reduce(fucntion (acc, fn) {\n            return fn(acc)\n        }, value)\n    }\n}\n\nconst compose = (...args) => value => args.reverse().reduce((acc, fn) => fn(acc), value)\n\n\n\n\n")])])]),a("h4",{attrs:{id:"组合函数-结合律"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合函数-结合律"}},[n._v("#")]),n._v(" 组合函数-结合律")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n    // 函数组合要满足结合律\n\n    const _ = require('lodash')\n\n    // const f = _.flowRight(_.toUpper, _.first, _.reverse)\n\n    // const f = _.flowRight(_.flowRight(_.toUpper, _.first), _.reverse)    \n\n")])])]),a("h4",{attrs:{id:"lodash中的fp模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lodash中的fp模块"}},[n._v("#")]),n._v(" lodash中的FP模块")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("lodash/fp")])]),n._v(" "),a("li",[a("p",[n._v("提供了不可变 auto-curried iteratee-first  data-last 的方法")])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n// lodash 模块\n\nconst _ = require('lodash')\n\n\n\n_.map(['a', 'b', 'c'], _.toUpper)\n\n//  => ['A', 'B', 'C']\n\n_.map(['a', 'b', 'c'])\n\n//  => ['a', 'b', 'c']\n\n_.split('Hello World', ' ')\n\n\n\n// lodash/fp 模块\n\nconst fp = require('lodash/fp')\n\nfp.map(fp.toUpper, ['a', 'b', 'c'])\n\nfp.map(fp.toUpper)(['a', 'b' ,'c'])\n\n\n\nfp.split(' ', 'Hello World')\n\nfp.split(' ')('Hello World')\n\n")])])]),a("h4",{attrs:{id:"lodash-map问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lodash-map问题"}},[n._v("#")]),n._v(" lodash map问题")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nconst _ = require('lodash')\nconsole.log(_.map(['23', '8', '10'], parseInt))\nconst fp = require('lodash/fp')\nconsole.log(fp.map(parseInt, ['23', '8', '10']))\n\n")])])]),a("h2",{attrs:{id:"point-free"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#point-free"}},[n._v("#")]),n._v(" Point Free")]),n._v(" "),a("p",[a("strong",[n._v("Point Free")]),n._v(": 我们可以把数据处理的过程定义与数据无关的合成运算，不需要用到代表互数据的那个参数，只要把简单的运算步骤合成到一起，在使用这种模式之前我们需要定义一些辅助的基本运算函数")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("不需要指明处理的数据")])]),n._v(" "),a("li",[a("p",[n._v("只需要合成运算过程")])]),n._v(" "),a("li",[a("p",[n._v("需要定义一些辅助的基本运算函数")])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nconst f = fp.flowRight(fp.join('-'), fp.map(_.toLower), fp.split(' '))\n\n\n\nconst fp = require('lodash/fp')\n\nconst f1 = word => word.toLowerCase().replace(/\\s+/g, '_')\n\nconst f = fp.flowRight(fp.replace(/\\s+/g, '_'), fp.toLower)\nconsole.log(f('Hello World'))\n\n")])])]),a("ul",[a("li",[n._v("Pointfree - 案例")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n// 把一个字符串的首字母提取并转换成大写，使用. 作为分隔符\n\nconst fp = require('lodash/fp')\n// const firstLetterToUpper = fp.flowRight(fp.join('. '), fp.map(fp.first), fp.map(fp.toUpper), fp.split(' '))\nconst firstLetterToUpper = fp.flowRight(fp.join('. '), fp.map(fp.flowRight(fp.first, fp.toUpper)), fp.split(' '))\n\nconsole.log(firstLetterToUpper('world wild web'))\n\n")])])]),a("h2",{attrs:{id:"函子-functor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函子-functor"}},[n._v("#")]),n._v(" 函子 Functor")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("为什么要学函子")]),n._v(" "),a("p",[n._v("把副作用控制控制在可控范围内、异常处理、异步操作等。")])]),n._v(" "),a("li",[a("p",[n._v("什么是Functor")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("容器： 包含值和值的变形关系（这个变形关系就是函数）")])]),n._v(" "),a("li",[a("p",[n._v("函子： 是一个特殊的容器，通过一个普通的对象来实现，该对象具有map方法，map方法可以运行一个函数对值进行处理（变形关系）")])])])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nclass Container {\n    static of (value) {\n        return new Container(value)\n    }\n    constructor (value) {\n        this._value = value\n    }\n\n    map (fn) {\n        return Container.of(fn(this._value))\n    }\n}\n\nlet r = new Container(5)\n            .map(x => x + 1)\n            .map(x => x * x)\nconsole.log(r) // Container { _value: 36 }\n\nlet w = Container.of(5)\n            .map(x => x + 2)\n            .map(x => x * x)\nconsole.log(w) // Container { _value: 49 }\n// 有一个缺陷  当传入值为空的时候，可能会引起报错\n\n")])])]),a("ul",[a("li",[a("p",[n._v("总结：")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("函数式编程的运算不直接操作值，而是由函子完成")])]),n._v(" "),a("li",[a("p",[n._v("函子就是一个实现了map契约的对象")])]),n._v(" "),a("li",[a("p",[n._v("我们可以把函子想象成一个盒子，这个盒子里封装了一个值")])]),n._v(" "),a("li",[a("p",[n._v("想要处理盒子中的值，我们需要给盒子的map方法传递一个处理值的函数（纯函数），由这个函数来对值进行处理")])]),n._v(" "),a("li",[a("p",[n._v("最终map方法返回一个包含新值的盒子（函子）")])])])])]),n._v(" "),a("h3",{attrs:{id:"maybe-函子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#maybe-函子"}},[n._v("#")]),n._v(" MayBe 函子")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("对编程中的错误进行处理")])]),n._v(" "),a("li",[a("p",[n._v("对外部的空值做处理（控制副作用在允许的范围内）")])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n    \n\nclass Maybe {\n    static of (value) {\n        return new Maybe(value)\n    }\n    constructor (value) {\n        this._value = value\n    }\n\n    map (fn) {\n        return this.isNothing() ? Maybe.of(null) : Maybe.of(fn(this._value))\n    }\n\n    isNothing () {\n        return this._value === null || this._value === undefined\n    }\n}\n\nlet r = Maybe.of(null)\n            .map(x => x.toUpperCase())\n            .map(x => null)\n            .map(x => x.split(' '))\n            console.log(r)\n//    多次调用，又一次出问题，并不能具体的捕获到时那次出问题\n\n")])])]),a("h3",{attrs:{id:"either函子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#either函子"}},[n._v("#")]),n._v(" Either函子")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("Either 两者中的任何一个，类似于if...else...的处理")])]),n._v(" "),a("li",[a("p",[n._v("异常会让函数变的不纯，Either 函子可以用来做异常处理")])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('\nclass Left {\n    static of (value) {\n        return new Left(value)\n    }\n    constructor (value) {\n        this._value = value\n    }\n    map(fn) {\n        return this\n    }\n}\n\nclass Right {\n    static of(value) {\n        return new Right(value)\n    }    \n    constructor(value) {\n        this._value = value\n    }\n    map(fn) {\n        return Right.of(fn(this._value))\n    }\n}\n\nfunction parseJSON (str) {\n    try {\n        return Right.of(JSON.parse(str))\n    } catch (e) {\n        return Left.of({error: e.message})\n    }\n}\n\nlet r = parseJSON(\'{ "name": "zs" }\')\n            .map(x => x.name.toUpperCase())\nconsole.log(r)\n\n')])])]),a("h3",{attrs:{id:"io-函子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#io-函子"}},[n._v("#")]),n._v(" IO 函子")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("IO函子中的_value 是一个函数，这里是把函数作为值来处理")])]),n._v(" "),a("li",[a("p",[n._v("IO函子可以把不纯的动作存储到_value中，延迟执行这个不纯的操作")])]),n._v(" "),a("li",[a("p",[n._v("把不纯的操作交给调用者来处理")])])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\nconst fp = require('lodash/fp')\nclass IO {\n    static of(value) {\n        return new IO(function() {\n            return value\n        })\n    }\n\n    constructor (fn) {\n        this._value = fn\n    }\n\n    map(fn) {\n        return new IO(fp.flowRight(fn, this._value))\n    }\n}\n\n//调用io方法\nlet r = IO.of(process).map(p => p.execPath)\n\nconsole.log(r._value())\n\n")])])]),a("h3",{attrs:{id:"tash-异步执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tash-异步执行"}},[n._v("#")]),n._v(" Tash 异步执行")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("异步任务的实现过去复杂，我们使用folktale中的task来演示")])]),n._v(" "),a("li",[a("p",[n._v("folkale一个标准的函数式编程函数，只提供了一些函数处理的操作")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);